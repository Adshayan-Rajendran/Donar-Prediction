# -*- coding: utf-8 -*-
"""Donar prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m03tdIwrnKauySwDKL9fIMAiSPSGTKe6

# Data Science Assignment

**Predicting whether a person is a donor or not using the donor data set.**

Mounting my google drive as a secondary memory.
"""

from google.colab import drive
drive.mount ('/content/drive')

"""Pandas is a data library that helps us to do data manipulation work.It provides a data structure called 'Data Frame' to hold the tabular structure of the data set.
 *pd:the nickname for panda
df: data frame's name*

*   The Training.csv file has 100 records taken from donor data set.
*    '?' and  '.' were replaced with blanks.
*    Deleted some of the categorical features.
"""

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Data Science/Training.csv')
df #to see the table here

"""**Handling missing values of training data set:**

"""

df.isnull().sum() #Take the dataframe and check the columns which donot have entries (has null values)

"""Replace the null values with mean/mode of each column"""

df['DONOR_AGE']=df['DONOR_AGE'].fillna(df['DONOR_AGE'].mean()) #mean used since numerical data
df['INCOME_GROUP']=df['INCOME_GROUP'].fillna(df['INCOME_GROUP'].mode()[0]) #mode used since categorical data
df['WEALTH_RATING']=df['WEALTH_RATING'].fillna(df['WEALTH_RATING'].mode()[0])
df['SES']=df['SES'].fillna(df['SES'].mode()[0])

df.isnull().sum()

"""# **Identifying the centrality and dispersion of the data set:**"""

import matplotlib.pyplot as plt
# import numpy as np
data = df['DONOR_AGE'] #A list containing donor age
fig = plt.figure(figsize =(10,7)) #creating a template

#  #Creating Box Plot
plt.boxplot(data)
plt.show()

correlation_matrix = df.corr()
correlation_matrix['TARGET_B']

#Check data types of the columns
df.dtypes

"""From above code we can see that there are columns with 'float' data type. We have to convert these to numeric (int64) form, so that they become machine-readable. """

#converting 'float' type to 'int64'
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
 
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

def label_encoder(y):
 le = LabelEncoder()
 df[y] = le.fit_transform(df[y])

#label list contains all the float typed columns
label_list = ['DONOR_AGE','SES','INCOME_GROUP','WEALTH_RATING','RECENT_RESPONSE_PROP','RECENT_AVG_GIFT_AMT','RECENT_CARD_RESPONSE_PROP','RECENT_AVG_CARD_GIFT_AMT','LIFETIME_GIFT_AMOUNT',                   
'LIFETIME_AVG_GIFT_AMT','LIFETIME_GIFT_RANGE','LIFETIME_MIN_GIFT_AMT','FILE_AVG_GIFT',]
 
for l in label_list:
 label_encoder(l)

#Check data types of the columns
df.dtypes

"""# Test Data File:

Adding the test data file which contains 25 records from the donor data set. 

*   These 25 records were not included in the training data set.
*   In the test.csv file, '?' and '.' were removed.
*   Also only the columns used in training data set were kept.
"""

import pandas as pd
df1 = pd.read_csv('/content/drive/MyDrive/Data Science/Test.csv')
df1

"""# Cleaning the Test.csv file:"""

df1.isnull().sum()

df1['DONOR_AGE']=df1['DONOR_AGE'].fillna(df1['DONOR_AGE'].mean())
df1['INCOME_GROUP']=df1['INCOME_GROUP'].fillna(df1['INCOME_GROUP'].mode()[0])
df1['WEALTH_RATING']=df1['WEALTH_RATING'].fillna(df1['WEALTH_RATING'].mode()[0])
df1['SES']=df1['SES'].fillna(df1['SES'].mode()[0])

df1.isnull().sum()

df1.dtypes

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
 
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

def label_encoder(y):
 le = LabelEncoder()
 df1[y] = le.fit_transform(df1[y])
 
label_list = ['DONOR_AGE','SES','INCOME_GROUP','WEALTH_RATING',
'RECENT_RESPONSE_PROP',          
'RECENT_AVG_GIFT_AMT',          
'RECENT_CARD_RESPONSE_PROP',     
'RECENT_AVG_CARD_GIFT_AMT',                 
'LIFETIME_GIFT_AMOUNT',                   
'LIFETIME_AVG_GIFT_AMT','LIFETIME_GIFT_RANGE','LIFETIME_MIN_GIFT_AMT','FILE_AVG_GIFT',]
 
for l in label_list:
 label_encoder(l)
 
df1.dtypes

"""* x : contains the features of training data set
* y : contains the label column (TARGET_B) of training data
* x1 : contains the features of test data set
* y2 : contains the label column (TARGET_B) of test data
"""

x = df.drop(['TARGET_B'],axis=1)
y = df['TARGET_B']
x1 =df1.drop(['TARGET_B'],axis=1)
y1 = df1['TARGET_B']

knn = KNeighborsClassifier(n_neighbors=1) #1 was used since its precision was highest compared 
knn.fit(x, y)

predict= knn.predict(x1) #predict TARGET_B using features of test data set
print(predict)

 #1 1 0 0 1 0 1 1 0 1 0 1 1 0 1 1 1 0 0 1 1 1 0 0 0 Actual target B

"""Find optimal k value:"""

error_rate = []
for i in range(1,40):
 knn = KNeighborsClassifier(n_neighbors=i)
 knn.fit(x,y)
 pred_i = knn.predict(x1)
 error_rate.append(np.mean(pred_i != y1))

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', 
         marker='o',markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')
print("Minimum error:-",min(error_rate),"at K =",error_rate.index(min(error_rate)))

"""# Confusion Matrix:
* Top left quadrant = True Positives = Number of benign labelled as benign
* Bottom right quadrant = True Negatives = Number of malignant labelled as malignant
* Top right quadrant = False Positives = Number of benign labelled as malignant
* Bottom left quadrant = False Negatives = Number of malignant labelled as benign
"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y1, predict)
cm

from sklearn.metrics import classification_report
 
print(classification_report(y1,predict))

"""References: https://www.geeksforgeeks.org/k-nearest-neighbor-algorithm-in-python/#:~:text=K%2Dnearest%20neighbor%20or%20K,resulting%20in%20less%20complex%20models.

https://www.naukri.com/learning/articles/predicting-categorical-data-using-classification-algorithms/
"""